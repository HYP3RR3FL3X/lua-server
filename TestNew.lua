local vm={stack={},instructions={},ip=1,vars={}}local identityFunc=printidentity or function()end identityFunc("Wave Executor running")function vm:push(value)print("PUSH: "..tostring(value))table.insert(self.stack,value)end function vm:pop()local v=table.remove(self.stack)print("POP: "..tostring(v))return v end function vm:run()while self.ip<=#self.instructions do local inst=self.instructions[self.ip]print("Executing: "..inst.op)if inst.op=="PUSH"then self:push(inst.value)elseif inst.op=="PUSH_NUM"then self:push(inst.value)elseif inst.op=="ADD"then local b=self:pop()local a=self:pop()local result=a+b self:push(result)elseif inst.op=="SUB"then local b=self:pop()local a=self:pop()local result=a-b self:push(result)elseif inst.op=="MUL"then local b=self:pop()local a=self:pop()local result=a*b self:push(result)elseif inst.op=="DIV"then local b=self:pop()local a=self:pop()if b==0 then warn("Division by zero!")self:push(0)else local result=a/b self:push(result)end elseif inst.op=="SET_VAR"then local value=self:pop()self.vars[inst.var_name]=value elseif inst.op=="GET_VAR"then local value=self.vars[inst.var_name] or 0 self:push(value)elseif inst.op=="CALL"then local func=inst.func=="print" and print or _G[inst.func]print("CALL: func name:", inst.func, "value:", func, "type:", type(func))if type(func)=="function" then local args={}for i=1,inst.arg_count do table.insert(args,1,self:pop())end print("Calling "..inst.func.." with args: "..table.concat(args,","))local success,err=pcall(func,unpack(args))if not success then print("Error calling "..inst.func..": "..tostring(err))end else warn("Function "..inst.func.." not callable, type: "..type(func))end end self.ip=self.ip+1 end end
local bytecode={{op="PUSH",value="hello"},{op="CALL",func="print",arg_count=1},{op="PUSH_NUM",value=5},{op="PUSH_NUM",value=3},{op="ADD"},{op="SET_VAR",var_name="x"},{op="GET_VAR",var_name="x"},{op="CALL",func="print",arg_count=1},{op="PUSH_NUM",value=10},{op="PUSH_NUM",value=4},{op="SUB"},{op="CALL",func="print",arg_count=1},{op="PUSH_NUM",value=6},{op="PUSH_NUM",value=2},{op="MUL"},{op="CALL",func="print",arg_count=1},{op="PUSH_NUM",value=15},{op="PUSH_NUM",value=3},{op="DIV"},{op="CALL",func="print",arg_count=1},{op="PUSH_NUM",value=10},{op="PUSH_NUM",value=0},{op="DIV"},{op="CALL",func="print",arg_count=1}}
vm.instructions=bytecode
vm:run()
